	#spring.datasource.url = jdbc:mysql://b0f6151efb5a02:83717638@us-cdbr-east-02.cleardb.com/heroku_ee7d19fc331949d?reconnect=true

	#spring.datasource.url = jdbc:mysql://localhost:3306/ebdb?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
	spring.datasource.url =jdbc:postgresql://localhost:5432/Interview

	#spring.datasource.username = root
	spring.datasource.username = postgres
	spring.datasource.password = rohitsharma1993
	#spring.datasource.driverClassName=org.postgresql.Driver
	#spring.jpa.open-in-view=false



# ==============================================================
	# = Keep the connection alive if idle for a long time (needed in production)
	# ==============================================================
	spring.datasource.testWhileIdle = true
	spring.datasource.validationQuery = SELECT 1
	
	# ==============================================================
	# = Show or not log for each sql query
	# ==============================================================
	spring.jpa.show-sql = true
	#spring.jpa.database=default

	# ==============================================================
	# = Hibernate ddl auto (create, create-drop, update)
	# ==============================================================
	spring.jpa.hibernate.ddl-auto = create

	# ==============================================================
	# = The SQL dialect makes Hibernate generate better SQL for the chosen database
	# ==============================================================
	#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
	spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

	# ==============================================================
	# = Spring Security / Queries for AuthenticationManagerBuilder
	# ==============================================================
	spring.queries.users-query=select email, password, active from user where email=?
	spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

	# ==============================================================
	# = Initialize the database using data.sql script
	# ==============================================================
	spring.datasource.initialization-mode=always
	server.port=${PORT:8083}


	spring.data.mongodb.authentication-database=admin
	spring.data.mongodb.username=love
	spring.data.mongodb.password=vidya1993
	spring.data.mongodb.database=test_db
	spring.data.mongodb.port=27017
	spring.data.mongodb.host=localhost

	security.oauth2.resource.filter-order=3

	security.signing-key=MaYzkSjmkzPC57L
	security.encoding-strength=256
	security.security-realm=Spring Boot JWT Example Realm

	security.jwt.client-id=testjwtclientid
	security.jwt.client-secret=XY7kmzoNzl100
	security.jwt.grant-type=password
	security.jwt.scope-read=read
	security.jwt.scope-write=write
	security.jwt.resource-ids=testjwtresourceid
	
	## Hibernate Logging
logging.level.org.hibernate.SQL= DEBUG


## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
jsa.aws.access_key_id=AKIA3M555J3YVW7EJ6NZ
jsa.aws.secret_access_key=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
jsa.s3.bucket=crack-bucket
jsa.s3.region=us-west-2

#file.upload-dir1=C:\\s3\\jsa-s3-upload-file.txt
jsa.s3.key=jsa-s3-upload-file.txt




endpointUrl=https://s3.us-west-2.amazonaws.com
accessKey=AKIA3M555J3YVW7EJ6NZ
secretKey=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
bucketName=crack-bucket


# logging level
logging.level.org.springframework=ERROR
logging.level.com.mkyong=DEBUG

# output to a file
logging.file=app.log

# temp folder example
#logging.file=${java.io.tmpdir}/app.log

logging.pattern.file=%d %p %c{1.} [%t] %m%n

logging.pattern.console=%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

## if no active profile, default is 'default'
##spring.profiles.active=prod

# root level
#logging.level.=INFO

#file.upload-dir=/home/love/Downloads/CrackInterviewJava-master/CrackInterview/src/main/resources/templates/image/



